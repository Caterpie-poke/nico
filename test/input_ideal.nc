「完成予想図となる契約」
作成日：2018/12/25
作成者：山田太郎

次の契約を組み込む：
    契約名：「ERC20に関する契約」（以下、ERC20とする）
    ファイルの場所：'./hoge.nc'
    ブロックチェーン上のアドレス：0x12a0c64...

c_ERC20 = new c_erc20に関する契約()
c_ERC721 = c_hoge(0x10af5c)

//第0条が状態変数の定義部分となる
第0条　台帳に記載され保護される記録 //任意の名前だがしっかり書くことを推奨する
    本トークンの総発行量（以下、総発行量とする）
    本トークンの発行者（以下、発行者とする）
    各ユーザのトークン保有量（以下、〜の残高とする）
    仮数値 //以下〜の指定がなければそのまま


//入力と準拠がしっくりこない？
第1条　送金（ERC20における"transfer"に準拠した条文）
    パラメータ：
        送金対象者のアドレス（以下、送り先とする）
        送金するトークンの量（以下、送金額とする）
    要件1　あなたの残高＞＝送金額 //あなたは条文の実行者、msg.senderであることは周知であるとする
    要件2　送り先のアドレスが存在する
    あなたの残高を送金額だけ減らす //AをBだけ増やす（減らす） -> A+=B A-=B
    送り先の残高を送金額だけ増やす
    結果として（true）を返す

第2条　お試し（変換後の名前は""とする）
    パラメータ：
        任意の数値（以下、入力1とする）
        任意の文字列（以下、入力2とする）
    要件1　入力1　NOT=　0
    「文字列は＜」 + 入力2 + 「＞です」としてローカル変数を定義する
    要件2　ローカル変数の文字列長　＞　0
    他契約ERC20より、第3条　送金を（送り先、送金額）に対して行う
    //ERC20.transfer(to,amount)
    契約ERC20より、第2条　残高確認を行った結果として残高出力をおく
    契約ERC20より、第2条を行う
    契約HOGEより、送り先・送金額をパラメータとして送金を行う
    '契約' ContractName 'より、' Params 'をパラメータとして' FuncName ('を行う'/'行った結果')


既存のトークンを使う場合はコントラクト型のインスタンスを用意する必要あり
コントラクト経由だとmsg.senderがcontractのアドレスになるためbalanceの直接移動ができず、出品者は一度コントラクトに対して送金許可を出す必要あり


トークン作成も同時に行う場合でも別にデプロイすべき
継承で組み込む場合というのは、例えば特定の買い物サイトとそこでのみ使えるコインを同時にデプロイしたい場合？
継承は結局モジュール化の1つ、継承したコントラクトが中に記述されるのと同義


//暫定バージョン
第5条　送金
    パラメータ：
        送金先のユーザ（以下、送金先と呼ぶ）
        送金するトークン量（以下、送金額と呼ぶ）
    要件1　対象者が有効である
    要件2　あなたの残高 >= 送金額
    あなたの残高を送金額だけ減らす
    送金先の残高を送金額だけ増やす
    SOL{emit Transfer(「あなた」,「送金先」,「送金額」)}
    trueを得る

//ブロックに分けるバージョン
第5条　送金
    入力値：
        送金先のユーザ（以下、送金先と呼ぶ）
        送金するトークン量（以下、送金額と呼ぶ）
    本文：
        要件1　対象者が有効である
        要件2　あなたの残高 >= 送金額
        あなたの残高を送金額だけ減らす
        送金先の残高を送金額だけ増やす
        SOL{emit Transfer(「あなた」,「送金先」,「送金額」)}
    出力値：
        true

//要件の別バージョン
第5条　送金
    〜
    条件　対象者が有効である
    あなたの残高 >= 送金額であること
    〜

//変換後の名前
第5条　送金(コードではtransferと表記)

importされているファイルがある
先にそちらのパースを行う
もしその中にもimportがあっても影響がないので無視
関数名の部分だけ読み取るパーサを使う
関数名のdictが作られる
    {
        'ほげげ':'f_0010201020',
        '送金':'transfer'
    }
keyには関数名の和名
変換後の指定がなければvalueはそのバイト文字、指定があればvalueは指定名
ASTにこれが追加された上で本体のパースが再開される




関数呼び（void関数とvar_nameへの代入の2通り）
    契約<contract_name>より、<params>をパラメータとし、<function_name>を行う
    契約<contract_name>より、<params>をパラメータとし、<function_name>を行った結果として<var_name>をおく
