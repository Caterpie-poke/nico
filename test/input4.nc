「ERC20に基づくトークンに関する契約」

第0条　記録される項目
    総発行量
    （参加者）の残高
    （対象者）から（送金者）が送金可能な金額
終了

第1条　契約の開始（constructor）
    入力：
        総発行量の指定値
    終了
    本文：
        総発行量を総発行量の指定値＊10とする
        あなたの残高を総発行量とする
    終了
終了

第2条　総発行量の確認（totalSupply）
    出力：
        総発行量
    終了
終了

第3条　残高の確認（balanceOf）
    入力：
        対象者
    終了
    出力：
        対象者の残高
    終了
終了

第4条　送金可能金額の確認（allowance）
    入力：
        対象者
        送金者
    終了
    出力：
        対象者から送金者が送金可能な金額
    終了
終了

第5条　送金（transfer）
    入力：
        対象者
        送金額
    終了
    要件：
        対象者 NOT= 0x0
        あなたの残高 >= 送金額
    終了
    本文：
        あなたの残高はあなたの残高ー送金額
        対象者の残高は対象者の残高＋送金額
        SOL{emit Transfer(「あなた」, 「対象者」, 「送金額」)}
    終了
    出力：
        true
    終了
終了

第6条　第3者による送金の許可（approve）
    入力：
        対象者
        指定額
    終了
    要件：
        対象者 NOT= 0x0
    終了
    本文：
        あなたから対象者が送金可能な金額を指定額とする
    終了
    出力：
        true
    終了
終了

第7条　第3者による送金（transferFrom）
    入力：
        被送金者
        対象者
        送金額
    終了
    要件：
        対象者 NOT= 0x0
        被送金者の残高 >= 送金額
        被送金者からあなたが送金可能な金額 >= 送金額
    終了
    本文：
        被送金者の残高は被送金者の残高ー送金額
        対象者の残高は対象者の残高＋送金額
    終了
    出力：
        true
    終了
終了

第8条　Solidity
    event Transfer(address, address, int);
    function hogege(uint p1) external returns(bytes4){
        uint cast = uint(「総発行量」);
        return bytes4(keccak256('transfer(address,uint)returns(bool)'));
    }
終了
