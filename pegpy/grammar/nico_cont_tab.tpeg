Source
    = _ {
    $Title NL
    ($ImportDecl)?
    ($VariableDecl)?
    ($FunctionDecl)*
    #Input
    } EOF

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / BLOCKCOMMENT / LINECOMMENT )+
S            = [ \t\n\r] / '　'
BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !EOL . )* EOL
EOF          = !.
EOL          = ('\r'? '\n') / EOF

SS = (" ")*
TAB = '    ' / [\t] / '　　　　'
TAB1 = TAB
TAB2 = TAB TAB
TAB3 = TAB TAB TAB
NL = ((" ")* EOL)+

"'" = '"' / '\''
" " = ' ' / '　'
"," = ',' / '、'
"(" = '(' / '（'
")" = ')' / '）'
"<" = '<' / '＜'
">" = '>' / '＞'
"+" = '+' / '＋'
"-" = '-' / 'ー'
"*" = '*' / '＊'
"/" = '/' / '／'
"**" = "*" "*"
"%" = '%' / '％'
"=" = '=' / '＝'
" " = ' ' / '　'
"@" = '@' / '＠'
":" = ':' / '：'
">=" = '>=' / '＞＝'
"<=" = '<=' / '＜＝'
"NOT=" = 'NOT=' / 'NOT＝'

C
    = HIRA
    / KATA
    / KANJI
    / MARK
    / Alphabet
    / [a-zA-Z0-9]

Any
    = [a-zA-Z0-9]

HIRA = [ぁ-ん]
KATA = [ァ-ヶ]
KANJI = [㐀-䶵一-龠々〇〻]
MARK = [ー]
Alphabet = [ａ-ｚＡ-Ｚ０-９]

/*-------------------------PreDescription-------------------------*/
Title
    = '「' InnerTitle '」'
InnerTitle
    = {(!'」' C)+ #Title}

FirstArticle
    = '第0条'
    / '第０条'
Article
    = '第' Digit '条'

/*-------------------------ImportDecl-------------------------*/
ImportDecl
    = {
    '次の契約を用いる' ":" NL
    (ImportSet)+
    #IDecl}
ImportSet
    = {
    TAB1 '契約名' ":" $Title NL
    TAB1 'ファイルの場所' ":" "'" ${(!SS !"'" .)* #Path} "'" NL
    TAB1 'ブロックチェーン上でのアドレス' ":" $Address NL
    }

/*-------------------------VariableDecl-------------------------*/
VariableDecl
    = {
    FirstArticle SS C+ NL
    (TAB1 C* SS "(" SS '以下、' VarDecl 'と呼ぶ' SS ")" NL)*
    #VDecl}

VarDecl
    = MapDecl
    / Identifier

//MapDecl created by dictParse
MapParam
    = "(" (!")" C)+ ")"
    / '〜'

/*-------------------------FunctionDecl-------------------------*/
FunctionDecl
    = {
    Article SS 'Solidity' SS EOL
    SolBlockInner EOL
    '' EOL EOL
    NL
    #SolBlock}
    / {
    Article SS $FuncDeclName NL
    ($FuncDeclInput)?
//    ($FuncDeclRequire)?
    ($FuncDeclBody)?
    ($FuncDeclOutput)?
    #FDecl}

SolBlockInner
    = {(!(EOL EOL EOL) .)* #Sol}

FuncDeclName
    = {$FuncName (SS "(" SS $FuncSolName SS ")")? #FDName}
FuncName
    = {(!"(" C)+ #FName}
FuncSolName
    = {[a-zA-Z] [a-zA-Z0-9]* #FSName}

FuncDeclInput
    = {
    TAB1 'パラメータ' ":" NL
    (TAB2 $Identifier NL)*
    #FDInput}

FuncDeclRequire
    = {
    TAB1 '要件' ":" NL
    (TAB2 $Expression NL)*
    #FDRequire}

FuncDeclBody
    = {
    TAB1 '本文' ":" NL
    (TAB2 $Statement NL)+
    #FDBody}

FuncDeclOutput
    = {
    TAB1 '出力' ":" NL
    (TAB2 $Expression NL)+
    #FDOutput}


/*-------------------------Statement-------------------------*/
Statement
    = IfStatement
    / RequireStatement
    / Solidity
    / Assign
    / LocalVariableDecl
    / Expression

IfStatement
    = {
    'もし' SS $Condition SS 'ならば' NL
    $Then
    ($ElseIf)*
    (
    TAB2 'でなければ'
    $Else
    )?
    TAB2 '終了'
    #If}
Condition
    = {$LogicalExpr #Cond}
Then
    = {(TAB3 TAB* $Statement NL)+ #Then}
ElseIf
    = {
    TAB2 TAB* 'ではなく、もし' SS $Condition SS 'ならば' NL
    $Then
    #ElIf}
Else
    = {(TAB3 TAB* $Statement NL)+ #Else}

RequireStatement
    = {
    '要件' Digit SS $Expression
    #Require}

Solidity
    = 'SOL{' SolInner '}'
SolInner
    = {(!'}' !EOL .)* #Sol}

Assign
    = {$AssignLeft SS 'は' SS $AssignRight (SS 'とする')? #Assign}
    / {$AssignLeft SS 'を' SS $AssignRight SS 'とする' #Assign}
AssignLeft
    = Tuple
    / PostfixExpr
AssignRight
    = Tuple
    / Expression

//Only used in Assign
Tuple
    = {"(" SS $PrimaryExpr (SS "," SS $PrimaryExpr)+ SS ")" #Tuple}

LocalVariableDecl
    = {($Expression SS 'として' SS)? $Identifier SS 'をおく' #LocalVDecl}

/*-------------------------Expression-------------------------*/
Expression
    = FunctionExpression
    / InnerFunction
    / Solidity
    / LogicalExpr

/*-------------------------FunctionExpr-------------------------*/
FunctionExpression
    = {
    ($FuncExprParam (SS "," SS $FuncExprParam)* SS 'をパラメータとして' SS )? $FuncExprName SS ('を行う' / 'を行なった結果')
    #FExpr}
FuncExprParam
    = {$PostfixExpr #FEParam}
FuncExprName
    = {!Preserved (!'を行う' !'を行なった結果' C)+ #FEName}
Preserved
    = 'とする'
    / 'として'
    / 'ならば'
    / 'でなければ'
    / 'ではなく、もし'
    / 'の'
    / ","
    / '終了'
    / [0-9]+
    / "+" / "-" / "*" / "/"
    / "<" / ">" / "<=" / ">="
    / "=" / "NOT="
    / 'かつ'
    / 'または'

InnerFunction
    = {PostfixExpr 'を' PostfixExpr 'だけ増やす' #IncFunc}
    / {PostfixExpr 'を' PostfixExpr 'だけ減らす' #DecFunc}
    / {PostfixExpr 'に' PostfixExpr 'を追加する' #PushFunc}
    / {PostfixExpr 'が存在する' #AddrExistFunc}

/*-------------------------LogicalExpr-------------------------*/
LogicalExpr
    = {$EqualityExpr (SS $({'かつ' #AND}/{'または' #OR}) SS $EqualityExpr)* #Logical}

EqualityExpr
    = {$RelationalExpr (SS $({"=" #EQ}/{"NOT=" #NEQ}) SS $RelationalExpr)* #Equality}

RelationalExpr
    = {$AddSubExpr (SS $CMPR SS $AddSubExpr)* #Relational}
CMPR
    = {">="#GTE}
    / {"<="#LTE}
    / {">"#GT}
    / {"<"#LT}

AddSubExpr
    = {$MulDivExpModExpr (SS $({"+" #ADD}/{"-" #SUB}) SS $MulDivExpModExpr)* #AddSub}
MulDivExpModExpr
    = {$PostfixExpr (SS $({"*" #MUL}/{"/" #DIV}/{"**" #EXP}/{"%" #MOD}) SS $PostfixExpr)* #MulDivExpMod}

/*-------------------------PostfixExpr-------------------------*/
PostfixExpr
    = StructRef
    / ArrayRef
    / MapRef
    / PrimaryExpr

StructRef
    = {$StructComponent ('の' $StructComponent)+ #StructRef}
StructComponent
    = ArrayRef
    / MapRef
    / Identifier

ArrayRef
    = {$ArrayComponent ('の' $Index '番目')+ #ArrayRef}
ArrayComponent
    = MapRef
    / Identifier
Index
    = {$(Num / Identifier) #Index}

PrimaryExpr
    = Address
    / Num
    / Boolean
    / String
    / Identifier

Num
    = {Digit #Int}
Digit
    = [1-9] [0-9]*
    / ([0] ![0-9])

Address
    = {'0x'
    [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9]
    [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9] [0-9]
    #Addr}
    / {'0x0' ![0-9] #Addr}

Boolean
    = {'はい' #BT}
    / {'いいえ' #BF}
    / {'true' #BT}
    / {'false' #BF}

String
    = {'「' (!'「' !'」' C)+ '」' #String}
    / {'"' (!'"' C)+ '"' #String}

Identifier
    = {FromDict #Id}

