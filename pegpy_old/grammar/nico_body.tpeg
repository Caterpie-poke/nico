Source
    = _ {
    $Title _
    FirstArticle? _ (!S .)+ _
    ($VariableDecl _)*
    ($FunctionDecl _)*
    #Input
    } EOF

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / BLOCKCOMMENT / LINECOMMENT )+
S            = [ \t\n\r] / '　'
BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !EOL . )* EOL
EOF          = !.
EOL          = ('\r'? '\n') / EOF

/*-------------------------PreDescription-------------------------*/
Title
    = '「' InnerTitle '」'
InnerTitle
    = {(!S !'」' .)+ #Title}

FirstArticle
    = '第0条'
Article
    = '第' Digit '条'

/*-------------------------VariableDecl-------------------------*/
VariableDecl
    = {$MapDecl #MDecl}
    / {'「' $MapDecl '」' #MDecl}
    / {$Word #VDecl}
//MDecl created by dictParse
MapParam
    = '（' (!'）' .)+ '）'
    / '〜'

/*-------------------------FunctionDecl-------------------------*/
//インデント処理ができれば終了は排除
FunctionDecl
    = {
    Article? _
    ($FuncDeclParam)? ($Adverb $FuncDeclParam)* $FuncDeclName _
    ($FuncDeclBody)?
    '終了'
    #FDecl}
FuncDeclParam
    = {$Word #FDParam}
FuncDeclName
    = {(!'とする' (!'「' !'」' !S .)+) #FDName}
FuncDeclBody
    = {($Statement _)+ #FDBody}

/*-------------------------Statement-------------------------*/
Statement
    = ReturnStatement
    / RequireStatement
    /// EventStatement
    / IfStatement
    / Assign
    / LocalVariableDecl
    / Expression

ReturnStatement
    = {$ReturnValue 'を得る' #Return}
ReturnValue
    = Tuple
    / PrimaryExpr

RequireStatement
    = {
    '要件' _
    ($LogicalExpr _)+
    '終了'
    #Require
    }

//Experimental
EventStatement
    = {
    $Word 'として以下を記録' EOL
    (_ '｜' $Expression EOL)+
    #Event
    }

IfStatement
    = {
    'もし' _ $Condition _ 'ならば'
    $Then
    ($ElseIf)*
    'でなければ'
    $Else
    '終了'
    #If}
Condition
    = {$LogicalExpr #Cond}
Then
    = {_ ($Statement _)+ #Then}
    / {'、' $Statement _ #Then}
ElseIf
    = {
    'ではなく、もし' _ $Condition _ 'ならば'
    $Then
    #ElIf
    }
Else
    = {_ ($Statement _)+ #Else}
    / {'、' $Statement _ #Else}

Assign
    = {$AssignLeft _ 'は' _ $Expression (_ 'とする')? #Assign}
    / {$AssignLeft _ 'を' _ $Expression _ 'とする' #Assign}
AssignLeft
    = Tuple
    / PostfixExpr

Tuple
    = {'（' $PrimaryExpr ('、' _ $PrimaryExpr)+ '）' #Tuple}

LocalVariableDecl
    = {($LogicalExpr _ 'として' _)? $Word _ 'をおく' #LocalVDecl}

/*-------------------------Expression-------------------------*/
Expression
    = Tuple
    / FunctionExpression
    / LogicalExpr

/*-------------------------FunctionExpr-------------------------*/
FunctionExpression
    = {
    ($FuncExprParam)? ($Adverb $FuncExprParam)* $FuncExprName
    #FExpr}
Adverb
    = {('は'/'が'/'に'/'と'/'から'/'へ'/'を'/'によって') #Adv}
FuncExprParam
    = {$PostfixExpr #FEParam}
FuncExprName
    = {!Preserved !Word (!S !'とする' .)+ #FEName}
Preserved
    = 'とする'
    / 'として'
    / 'ならば'
    / 'でなければ'
    / 'ではなく、もし'
    / 'の'
    / '、'
    / '終了'
    / [0-9]+
    / '+' / '-' / '*' / '/'
    / '<' / '>' / '<=' / '>='
    / '=' / 'NOT='
    / 'かつ'
    / 'または'

/*-------------------------LogicalExpr-------------------------*/
LogicalExpr
    = {$EqualityExpr (_ $({'かつ' #AND}/{'または' #OR}) _ $EqualityExpr)* #Logical}

EqualityExpr
    = {$RelationalExpr (_ $({'=' #EQ}/{'NOT=' #NEQ}) _ $RelationalExpr)* #Equality}

RelationalExpr
    = {$AddSubExpr (_ $CMPR _ $AddSubExpr)* #Relational}
CMPR
    = {'>='#GTE}
    / {'<='#LTE}
    / {'>'#GT}
    / {'<'#LT}

AddSubExpr
    = {$MulDivExpr (_ $({'+' #ADD}/{'-' #SUB}) _ $MulDivExpr)* #AddSub}
MulDivExpr
    = {$PostfixExpr (_ $({'*' #MUL}/{'/' #DIV}) _ $PostfixExpr)* #MulDiv}

/*-------------------------PostfixExpr-------------------------*/
PostfixExpr
    = StructRef
    / ArrayRef
    / MapRef
    / PrimaryExpr

StructRef
    = {$StructComponent ('の' $StructComponent)+ #StructRef}
StructComponent
    = ArrayRef
    / MapRef
    / Word

ArrayRef
    = {$ArrayComponent ('の' $Index '番目')+ #ArrayRef}
ArrayComponent
    = MapRef
    / Word
Index
    = {$(Num / Word) #Index}

PrimaryExpr
    = Num
    / Address
    / Boolean
    / Word

Num
    = {Digit #Int}
Digit
    = [1-9] [0-9]*
    / [0]

Address
    = {'@0x' [0-9]+ #Addr}

Boolean
    = {'はい' #BT}
    / {'いいえ' #BF}

Word
    = '「' Identifier '」'
    / {FromDict #Word}
Identifier
    = {(!'「' !'」' .)+ #Word}
NonTagWord
    = '「' (!'「' !'」' .)+ '」'
    / FromDict

