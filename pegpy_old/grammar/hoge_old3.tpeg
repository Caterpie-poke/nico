Source
    = _ {'＃記録項目' _ ($VariableDecl _)* '＃操作定義' _ ($FunctionDecl _)* #Input} EOF

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / BLOCKCOMMENT / LINECOMMENT )+
S            = [ \t\n\r]
BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !EOL . )* EOL
EOF          = !.
EOL          = ('\r'? '\n') / EOF

/*-------------------------VariableDecl-------------------------*/
VariableDecl
    = {($Word) #VDecl}

/*-------------------------FunctionDecl-------------------------*/
FunctionDecl
    = {
    ($FuncDeclParam)? ($Adverb $FuncDeclParam)* $FuncDeclName EOL
    ($FuncDeclBody)?
    '終了'
    #FDecl}
FuncDeclParam
    = {$Word #FDParam}
FuncDeclName
    = {(!'とする' (!'「' !'」' !S .)+) #FDName}
FuncDeclBody
    = _ {($Statement _)+ #FDBody}


/*-------------------------Statement-------------------------*/
Statement
    = ReturnStatement
    / RequireStatement
    / EventStatement
    / IfStatement
    / Assign
    / Expression

ReturnStatement
    = {
    '出力' EOL
    (_ $PostfixExpr EOL)+
    #Return
    }

RequireStatement
    = {
    '要件' EOL
    (_ $Expression EOL)+
    #Require
    }

EventStatement
    = {
    $Word 'として以下を記録' EOL
    (_ '｜' $Expression EOL)+
    #Event
    }

IfStatement
    = {
    'もし' _ $Condition _ 'ならば' $Then
    ($ElseIf)*
    'でなければ' $Else
    #If}
Condition
    = {$Expression #Cond}
Then
    = {EOL (_ '｜' $Statement EOL)* #Then}
    / {'、' _ $Statement EOL #Then}
ElseIf
    = {
    'ではなく、もし' _ $Condition _ 'ならば' $Then
    #ElIf
    }
Else
    = {EOL (_ '｜' $Statement EOL)* #Else}
    / {'、' _ $Statement EOL #Else}

Assign
    = {$PostfixExpr 'は' $Expression ('とする')? #Assign}
    / {$PostfixExpr 'を' $Expression 'とする' #Assign}

/*-------------------------Expression-------------------------*/
Expression
    = LogicalExpr

LogicalExpr
    = {$EqualityExpr ($({'　かつ　'#AND}/{'　または　'#OR}) $EqualityExpr)* #Logical}

EqualityExpr
    = {$RelationalExpr ($({'='#EQ}/{'NOT='#NEQ}) $RelationalExpr)* #Equality}

RelationalExpr
    = {$AddSubExpr ($CMPR $AddSubExpr)* #Relational}
CMPR
    = {'>='#GTE}
    / {'<='#LTE}
    / {'>'#GT}
    / {'<'#LT}

AddSubExpr
    = {$MulDivExpr ($({'+'#ADD}/{'-'#SUB}) $MulDivExpr)* #AddSub}
MulDivExpr
    = {$SemiExpr ($({'*'#MUL}/{'/'#DIV}) $SemiExpr)* #MulDiv}

SemiExpr
    = FunctionExpression
    / PostfixExpr

FunctionExpression
    = {
    ($FuncExprParam)? ($Adverb $FuncExprParam)* $FuncExprName
    #FExpr}
Adverb
    = {('は'/'が'/'に'/'と'/'から'/'へ'/'を'/'によって') #Adv}
FuncExprParam
    = {$PostfixExpr #FEParam}
FuncExprName
    = {!Preserved (!'「' !'」' !S .)+ #FEName}
Preserved
    = 'とする'
    / '番目'
    / '終了'
    / [0-9]+
    / '+' / '-' / '*' / '/'
    / '<' / '>' / '<=' / '>='
    / '=' / 'NOT='
    / '　かつ　'
    / '　または　'

PostfixExpr
    = MapRef
    / StructRef
    / PrimaryExpr

//左再帰使いたい
MapRef
    = {$Word 'の投票者情報' #Map00}
    / {$Word 'が' $Word 'から動かせる金額' #Map01}
    / {$Word 'の残高' #Map02}

StructRef
    = {$StructComponent ('の' $StructComponent)* #StructRef}
StructComponent
    = ArrayRef
    / Word

ArrayRef
     = {$Word ('の' $Index '番目')+ #ArrayRef}
Index
    = {$Num #Index}

PrimaryExpr
    = Num
    / Word

Num
    = {[0-9]+ #Int}

Word
    = '「' Identifier '」'
    / {FromDict #Word}
FromDict
    = '実行者'
    / '対象者'
    / '送金額'
Identifier
    = {(!'「' !'」' .)+ #Word}
